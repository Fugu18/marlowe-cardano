-- File auto generated by purescript-bridge! --
module Marlowe.Run.Dto where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map (Map)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype CurrencySymbolDto = CurrencySymbolDto String

derive instance eqCurrencySymbolDto :: Eq CurrencySymbolDto

instance showCurrencySymbolDto :: Show CurrencySymbolDto where
  show a = genericShow a

instance encodeJsonCurrencySymbolDto :: EncodeJson CurrencySymbolDto where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance decodeJsonCurrencySymbolDto :: DecodeJson CurrencySymbolDto where
  decodeJson = defer \_ -> D.decode $ (CurrencySymbolDto <$> D.value)

derive instance genericCurrencySymbolDto :: Generic CurrencySymbolDto _

derive instance newtypeCurrencySymbolDto :: Newtype CurrencySymbolDto _

--------------------------------------------------------------------------------

_CurrencySymbolDto :: Iso' CurrencySymbolDto String
_CurrencySymbolDto = _Newtype

--------------------------------------------------------------------------------

newtype TokenNameDto = TokenNameDto String

derive instance eqTokenNameDto :: Eq TokenNameDto

instance showTokenNameDto :: Show TokenNameDto where
  show a = genericShow a

instance encodeJsonTokenNameDto :: EncodeJson TokenNameDto where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance decodeJsonTokenNameDto :: DecodeJson TokenNameDto where
  decodeJson = defer \_ -> D.decode $ (TokenNameDto <$> D.value)

derive instance genericTokenNameDto :: Generic TokenNameDto _

derive instance newtypeTokenNameDto :: Newtype TokenNameDto _

--------------------------------------------------------------------------------

_TokenNameDto :: Iso' TokenNameDto String
_TokenNameDto = _Newtype

--------------------------------------------------------------------------------

newtype WalletIdDto = WalletIdDto String

derive instance eqWalletIdDto :: Eq WalletIdDto

instance showWalletIdDto :: Show WalletIdDto where
  show a = genericShow a

instance encodeJsonWalletIdDto :: EncodeJson WalletIdDto where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance decodeJsonWalletIdDto :: DecodeJson WalletIdDto where
  decodeJson = defer \_ -> D.decode $ (WalletIdDto <$> D.value)

derive instance genericWalletIdDto :: Generic WalletIdDto _

derive instance newtypeWalletIdDto :: Newtype WalletIdDto _

--------------------------------------------------------------------------------

_WalletIdDto :: Iso' WalletIdDto String
_WalletIdDto = _Newtype

--------------------------------------------------------------------------------

newtype AssetsDto = AssetsDto (Map CurrencySymbolDto (Map TokenNameDto BigInt))

derive instance eqAssetsDto :: Eq AssetsDto

instance showAssetsDto :: Show AssetsDto where
  show a = genericShow a

instance encodeJsonAssetsDto :: EncodeJson AssetsDto where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    (E.dictionary E.value (E.dictionary E.value E.value))

instance decodeJsonAssetsDto :: DecodeJson AssetsDto where
  decodeJson = defer \_ -> D.decode $
    (AssetsDto <$> (D.dictionary D.value (D.dictionary D.value D.value)))

derive instance genericAssetsDto :: Generic AssetsDto _

derive instance newtypeAssetsDto :: Newtype AssetsDto _

--------------------------------------------------------------------------------

_AssetsDto :: Iso' AssetsDto (Map CurrencySymbolDto (Map TokenNameDto BigInt))
_AssetsDto = _Newtype