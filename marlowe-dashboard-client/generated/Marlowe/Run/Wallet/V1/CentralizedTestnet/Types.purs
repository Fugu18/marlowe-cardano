-- File auto generated by purescript-bridge! --
module Marlowe.Run.Wallet.V1.CentralizedTestnet.Types where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype CheckPostData = CheckPostData (Array String)

derive instance Eq CheckPostData

instance Show CheckPostData where
  show a = genericShow a

instance EncodeJson CheckPostData where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson CheckPostData where
  decodeJson = defer \_ -> D.decode $ (CheckPostData <$> D.value)

derive instance Generic CheckPostData _

derive instance Newtype CheckPostData _

--------------------------------------------------------------------------------

_CheckPostData :: Iso' CheckPostData (Array String)
_CheckPostData = _Newtype

--------------------------------------------------------------------------------

data RestoreError
  = InvalidMnemonic
  | RestoreWalletError
  | FetchPubKeyHashError

derive instance Eq RestoreError

instance Show RestoreError where
  show a = genericShow a

instance EncodeJson RestoreError where
  encodeJson = defer \_ -> E.encode E.enum

instance DecodeJson RestoreError where
  decodeJson = defer \_ -> D.decode D.enum

derive instance Ord RestoreError

derive instance Generic RestoreError _

instance Enum RestoreError where
  succ = genericSucc
  pred = genericPred

instance Bounded RestoreError where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_InvalidMnemonic :: Prism' RestoreError Unit
_InvalidMnemonic = prism' (const InvalidMnemonic) case _ of
  InvalidMnemonic -> Just unit
  _ -> Nothing

_RestoreWalletError :: Prism' RestoreError Unit
_RestoreWalletError = prism' (const RestoreWalletError) case _ of
  RestoreWalletError -> Just unit
  _ -> Nothing

_FetchPubKeyHashError :: Prism' RestoreError Unit
_FetchPubKeyHashError = prism' (const FetchPubKeyHashError) case _ of
  FetchPubKeyHashError -> Just unit
  _ -> Nothing

--------------------------------------------------------------------------------

newtype RestorePostData = RestorePostData
  { getMnemonicPhrase :: Array String
  , getPassphrase :: String
  , getWalletName :: String
  }

derive instance Eq RestorePostData

instance Show RestorePostData where
  show a = genericShow a

instance EncodeJson RestorePostData where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { getMnemonicPhrase: E.value :: _ (Array String)
        , getPassphrase: E.value :: _ String
        , getWalletName: E.value :: _ String
        }
    )

instance DecodeJson RestorePostData where
  decodeJson = defer \_ -> D.decode $
    ( RestorePostData <$> D.record "RestorePostData"
        { getMnemonicPhrase: D.value :: _ (Array String)
        , getPassphrase: D.value :: _ String
        , getWalletName: D.value :: _ String
        }
    )

derive instance Generic RestorePostData _

derive instance Newtype RestorePostData _

--------------------------------------------------------------------------------

_RestorePostData :: Iso' RestorePostData
  { getMnemonicPhrase :: Array String
  , getPassphrase :: String
  , getWalletName :: String
  }
_RestorePostData = _Newtype
