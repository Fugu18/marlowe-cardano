Delimiter statement: WITH contractIds (createTxId, createTxIx) AS (SELECT * FROM UNNEST($1, $2)), roleTokens (rolesCurrency, role) AS (SELECT * FROM UNNEST($3, $4)) SELECT payoutTxOut.txId, payoutTxOut.txIx, applyTx.slotNo FROM marlowe.payoutTxOut NATURAL JOIN marlowe.applyTx NATURAL JOIN contractIds NATURAL JOIN roleTokens LEFT JOIN marlowe.withdrawalTxIn ON payoutTxOut.txId = withdrawalTxIn.payoutTxId AND payoutTxOut.txIx = withdrawalTxIn.payoutTxIx WHERE (payoutTxOut.txId = $5 AND payoutTxOut.txIx = $6) AND withdrawalTxIn.txId ISNULL
Total count statement: WITH contractIds (createTxId, createTxIx) AS (SELECT * FROM UNNEST($1, $2)), roleTokens (rolesCurrency, role) AS (SELECT * FROM UNNEST($3, $4)) SELECT count(*) FROM marlowe.payoutTxOut NATURAL JOIN marlowe.applyTx NATURAL JOIN contractIds NATURAL JOIN roleTokens LEFT JOIN marlowe.withdrawalTxIn ON payoutTxOut.txId = withdrawalTxIn.payoutTxId AND payoutTxOut.txIx = withdrawalTxIn.payoutTxIx WHERE (TRUE) AND withdrawalTxIn.txId ISNULL
Payouts statement: WITH contractIds (createTxId, createTxIx) AS (SELECT * FROM UNNEST($1, $2)), roleTokens (rolesCurrency, role) AS (SELECT * FROM UNNEST($3, $4)) SELECT withdrawalTxIn.txId, applyTx.createTxId, applyTx.createTxIx, payoutTxOut.txId, payoutTxOut.txIx, payoutTxOut.rolesCurrency, payoutTxOut.role FROM marlowe.payoutTxOut NATURAL JOIN marlowe.applyTx NATURAL JOIN contractIds NATURAL JOIN roleTokens LEFT JOIN marlowe.withdrawalTxIn ON payoutTxOut.txId = withdrawalTxIn.payoutTxId AND payoutTxOut.txIx = withdrawalTxIn.payoutTxIx WHERE (applyTx.slotNo > $5 OR (applyTx.slotNo = $5 AND (payoutTxOut.txId > $6 OR (payoutTxOut.txId = $6 AND payoutTxOut.txIx >= $7)))) AND withdrawalTxIn.txId ISNULL ORDER BY applyTx.slotNo, payoutTxOut.txId, payoutTxOut.txIx OFFSET $8 FETCH NEXT $9 ROWS ONLY
