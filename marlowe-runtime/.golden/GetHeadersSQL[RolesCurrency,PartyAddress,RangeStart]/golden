Delimiter statement: WITH partyAddresses (address) AS (SELECT * FROM UNNEST($1)) SELECT createTxOut.txId, createTxOut.txIx, createTxOut.slotNo FROM marlowe.createTxOut NATURAL JOIN marlowe.contractTxOut NATURAL JOIN UNNEST($2) AS roles (rolesCurrency) WHERE (createTxOut.txId = $3 AND createTxOut.txIx = $4) AND (EXISTS (SELECT 1 FROM marlowe.contractTxOutPartyAddress NATURAL JOIN partyAddresses WHERE createTxOut.txId = contractTxOutPartyAddress.createTxId AND createTxOut.txIx = contractTxOutPartyAddress.createTxIx))
Total count statement: WITH partyAddresses (address) AS (SELECT * FROM UNNEST($1)) SELECT count(*) FROM marlowe.createTxOut NATURAL JOIN marlowe.contractTxOut NATURAL JOIN UNNEST($2) AS roles (rolesCurrency) WHERE EXISTS (SELECT 1 FROM marlowe.contractTxOutPartyAddress NATURAL JOIN partyAddresses WHERE createTxOut.txId = contractTxOutPartyAddress.createTxId AND createTxOut.txIx = contractTxOutPartyAddress.createTxIx)
Headers statement: WITH partyAddresses (address) AS (SELECT * FROM UNNEST($1)) SELECT createTxOut.slotNo, createTxOut.blockId, createTxOut.blockNo, createTxOut.txId, createTxOut.txIx, contractTxOut.rolesCurrency, createTxOut.metadata, txOut.address, contractTxOut.payoutScriptHash FROM marlowe.createTxOut NATURAL JOIN marlowe.contractTxOut NATURAL JOIN marlowe.txOut NATURAL JOIN UNNEST($2) AS roles (rolesCurrency) WHERE (createTxOut.slotNo < $3 OR (createTxOut.slotNo = $3 AND (createTxOut.txId < $4 OR (createTxOut.txId = $4 AND createTxOut.txIx <= $5)))) AND (EXISTS (SELECT 1 FROM marlowe.contractTxOutPartyAddress NATURAL JOIN partyAddresses WHERE createTxOut.txId = contractTxOutPartyAddress.createTxId AND createTxOut.txIx = contractTxOutPartyAddress.createTxIx)) ORDER BY createTxOut.slotNo DESC, createTxOut.txId DESC, createTxOut.txIx DESC OFFSET $6 FETCH NEXT $7 ROWS ONLY
