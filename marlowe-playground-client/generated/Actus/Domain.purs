-- File auto generated by purescript-bridge! --
module Actus.Domain where

import Prelude

import Actus.Domain.BusinessEvents (EventType)
import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Argonaut.Encode.Aeson as E
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Map as Map
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))

newtype CashFlow a = CashFlow
  { tick :: BigInt
  , cashContractId :: String
  , cashParty :: String
  , cashCounterParty :: String
  , cashPaymentDay :: String
  , cashCalculationDay :: String
  , cashEvent :: EventType
  , amount :: a
  , notional :: a
  , cashCurrency :: String
  }

instance (EncodeJson a) => EncodeJson (CashFlow a) where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { tick: E.value :: _ BigInt
        , cashContractId: E.value :: _ String
        , cashParty: E.value :: _ String
        , cashCounterParty: E.value :: _ String
        , cashPaymentDay: E.value :: _ String
        , cashCalculationDay: E.value :: _ String
        , cashEvent: E.value :: _ EventType
        , amount: E.value :: _ a
        , notional: E.value :: _ a
        , cashCurrency: E.value :: _ String
        }
    )

instance (DecodeJson a) => DecodeJson (CashFlow a) where
  decodeJson = defer \_ -> D.decode $
    ( CashFlow <$> D.record "CashFlow"
        { tick: D.value :: _ BigInt
        , cashContractId: D.value :: _ String
        , cashParty: D.value :: _ String
        , cashCounterParty: D.value :: _ String
        , cashPaymentDay: D.value :: _ String
        , cashCalculationDay: D.value :: _ String
        , cashEvent: D.value :: _ EventType
        , amount: D.value :: _ a
        , notional: D.value :: _ a
        , cashCurrency: D.value :: _ String
        }
    )

derive instance Generic (CashFlow a) _

derive instance Newtype (CashFlow a) _

--------------------------------------------------------------------------------

_CashFlow
  :: forall a
   . Iso' (CashFlow a)
       { tick :: BigInt
       , cashContractId :: String
       , cashParty :: String
       , cashCounterParty :: String
       , cashPaymentDay :: String
       , cashCalculationDay :: String
       , cashEvent :: EventType
       , amount :: a
       , notional :: a
       , cashCurrency :: String
       }
_CashFlow = _Newtype
