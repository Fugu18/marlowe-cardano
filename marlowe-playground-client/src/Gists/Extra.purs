module Gists.Extra where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<))
import Data.Argonaut.Encode.Aeson as E
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Servant.PureScript (class ToPathSegment)

newtype GistId = GistId String

-- Note [GistID hotfix]: This type was originally autogenerated by PSGenerator, but the
--                       default instance that was created for ToPathSegment lead to bug
--                       SCP-3750 and make it impossible to load and save a gist file.
--                       This is a hotfix that makes the url for loading gists look like
--                       /api/gists/%22some-gist-id%22, which is what the Backend is expecting.
--                       I created ticket SCP-3793 to eventually solve this in playground common,
--                       the backend, and Marlowe and Plutus playground.
instance ToPathSegment GistId where
  toPathSegment (GistId str) = show str

derive instance Eq GistId

derive instance Ord GistId

instance Show GistId where
  show a = genericShow a

instance EncodeJson GistId where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson GistId where
  decodeJson = defer \_ -> D.decode $ (GistId <$> D.value)

derive instance Generic GistId _

derive instance Newtype GistId _

--------------------------------------------------------------------------------

_GistId :: Iso' GistId String
_GistId = _Newtype

--------------------------------------------------------------------------------
